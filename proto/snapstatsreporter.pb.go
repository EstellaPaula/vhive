// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snapstatsreporter.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AvailableSnapsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableSnapsReq) Reset()         { *m = AvailableSnapsReq{} }
func (m *AvailableSnapsReq) String() string { return proto.CompactTextString(m) }
func (*AvailableSnapsReq) ProtoMessage()    {}
func (*AvailableSnapsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1223e8f54382d34e, []int{0}
}

func (m *AvailableSnapsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailableSnapsReq.Unmarshal(m, b)
}
func (m *AvailableSnapsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailableSnapsReq.Marshal(b, m, deterministic)
}
func (m *AvailableSnapsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableSnapsReq.Merge(m, src)
}
func (m *AvailableSnapsReq) XXX_Size() int {
	return xxx_messageInfo_AvailableSnapsReq.Size(m)
}
func (m *AvailableSnapsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableSnapsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableSnapsReq proto.InternalMessageInfo

type AvailableSnapsResp struct {
	Revisions            []string `protobuf:"bytes,1,rep,name=revisions,proto3" json:"revisions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableSnapsResp) Reset()         { *m = AvailableSnapsResp{} }
func (m *AvailableSnapsResp) String() string { return proto.CompactTextString(m) }
func (*AvailableSnapsResp) ProtoMessage()    {}
func (*AvailableSnapsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1223e8f54382d34e, []int{1}
}

func (m *AvailableSnapsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailableSnapsResp.Unmarshal(m, b)
}
func (m *AvailableSnapsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailableSnapsResp.Marshal(b, m, deterministic)
}
func (m *AvailableSnapsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableSnapsResp.Merge(m, src)
}
func (m *AvailableSnapsResp) XXX_Size() int {
	return xxx_messageInfo_AvailableSnapsResp.Size(m)
}
func (m *AvailableSnapsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableSnapsResp.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableSnapsResp proto.InternalMessageInfo

func (m *AvailableSnapsResp) GetRevisions() []string {
	if m != nil {
		return m.Revisions
	}
	return nil
}

func init() {
	proto.RegisterType((*AvailableSnapsReq)(nil), "proto.AvailableSnapsReq")
	proto.RegisterType((*AvailableSnapsResp)(nil), "proto.AvailableSnapsResp")
}

func init() {
	proto.RegisterFile("snapstatsreporter.proto", fileDescriptor_1223e8f54382d34e)
}

var fileDescriptor_1223e8f54382d34e = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0xce, 0x4b, 0x2c,
	0x28, 0x2e, 0x49, 0x2c, 0x29, 0x2e, 0x4a, 0x2d, 0xc8, 0x2f, 0x2a, 0x49, 0x2d, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xc2, 0x5c, 0x82, 0x8e, 0x65, 0x89, 0x99, 0x39,
	0x89, 0x49, 0x39, 0xa9, 0xc1, 0x20, 0xa5, 0x41, 0xa9, 0x85, 0x4a, 0x46, 0x5c, 0x42, 0xe8, 0x82,
	0xc5, 0x05, 0x42, 0x32, 0x5c, 0x9c, 0x45, 0xa9, 0x65, 0x99, 0xc5, 0x99, 0xf9, 0x79, 0xc5, 0x12,
	0x8c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x08, 0x01, 0xa3, 0x78, 0x2e, 0x41, 0x90, 0xd2, 0x60, 0x90,
	0x55, 0x41, 0x50, 0xab, 0x84, 0xbc, 0xb8, 0x04, 0xdd, 0x53, 0x4b, 0x50, 0xcd, 0x12, 0x92, 0x80,
	0xb8, 0x40, 0x0f, 0xc3, 0x5e, 0x29, 0x49, 0x1c, 0x32, 0xc5, 0x05, 0x4a, 0x0c, 0x49, 0x6c, 0x60,
	0x39, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xfc, 0x0d, 0xd9, 0xd2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SnapStatsReporterClient is the client API for SnapStatsReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnapStatsReporterClient interface {
	GetAvailableSnaps(ctx context.Context, in *AvailableSnapsReq, opts ...grpc.CallOption) (*AvailableSnapsResp, error)
}

type snapStatsReporterClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapStatsReporterClient(cc grpc.ClientConnInterface) SnapStatsReporterClient {
	return &snapStatsReporterClient{cc}
}

func (c *snapStatsReporterClient) GetAvailableSnaps(ctx context.Context, in *AvailableSnapsReq, opts ...grpc.CallOption) (*AvailableSnapsResp, error) {
	out := new(AvailableSnapsResp)
	err := c.cc.Invoke(ctx, "/proto.SnapStatsReporter/GetAvailableSnaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapStatsReporterServer is the server API for SnapStatsReporter service.
type SnapStatsReporterServer interface {
	GetAvailableSnaps(context.Context, *AvailableSnapsReq) (*AvailableSnapsResp, error)
}

// UnimplementedSnapStatsReporterServer can be embedded to have forward compatible implementations.
type UnimplementedSnapStatsReporterServer struct {
}

func (*UnimplementedSnapStatsReporterServer) GetAvailableSnaps(ctx context.Context, req *AvailableSnapsReq) (*AvailableSnapsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSnaps not implemented")
}

func RegisterSnapStatsReporterServer(s *grpc.Server, srv SnapStatsReporterServer) {
	s.RegisterService(&_SnapStatsReporter_serviceDesc, srv)
}

func _SnapStatsReporter_GetAvailableSnaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableSnapsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapStatsReporterServer).GetAvailableSnaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SnapStatsReporter/GetAvailableSnaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapStatsReporterServer).GetAvailableSnaps(ctx, req.(*AvailableSnapsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnapStatsReporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SnapStatsReporter",
	HandlerType: (*SnapStatsReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableSnaps",
			Handler:    _SnapStatsReporter_GetAvailableSnaps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snapstatsreporter.proto",
}
